#!/bin/bash

set -e

usage() {
	echo "
$0 [OPTIONS] [ -i|--image IMAGE[:TAG] | -p|--package PACKAGE | -s|--sbom SBOM.spdx.json ]

Options:
 -i|--image IMAGE[:TAG]		target image from cgr.dev to fetch sources
 -p|--package PACKAGE		target wolfi package to fetch sources
 -s|--sbom SBOM.spdx.json	target sbom to process, fetching all referenced sources
 -a|--arch [amd64|arm64]	Default = amd64
 -d|--dry-run			Dry run (skip actual source downloads)
 -y|--yes			Automatically answer "y" to acknowledge the
 				warning prompt that this tool will use a lot of
				network and disk

IMAGE:		Image short name, as in the * in: cgr.dev/chainguard/*
		  - wolfi-base:latest
		  - python:3.11
		  - openjdk
		Default tag = :latest

PACKAGE:	Chaingaurd package short name, as in 'apk add FOO'

SBOM.spdx.json:	Path to a Chainguard JSON SPDX file name

Notes:
  This tool will create a new directory in your present working directory called
  sources/  It will then download the SBOM associated with your specified IMAGE,
  PACKAGE, or SBOM and then fetch all upstream sources with git and/or wget,
  at the specific commit used in the image (git), or checked against a checksum
  (wget).

  This tool is implemented in shell script to provide maximum transparency in
  how it works and for the ease of extensibility by its users.

  The goal is for Chainguard customers to easily be able to the exact
  source code in Chainguard images

  Note that this script often download several GB of source code, even for the
  most basic images.

  This may consume a lot of network bandwidth and disk, and you may be
  throttled by upstream source repository servers.
"
}

error() {
	echo "ERROR: $@" 1>&2
	exit 1
}

info() {
	echo "INFO: $@" 1>&2
}

# Check dependencies
checkdeps() {
	for i in bunzip2 cosign jq git gzip sha512sum tar wget xz; do
		type $i 2>&1 >/dev/null || error "Please install [$i]."
	done
}

# Warn that this tool may consume a lot of network and disk
warn_about_resources() {
	if [ "$YES" != "1" ]; then
		echo
		echo "This tool will consume a lot of network and disk, as it fetches full"
		echo "git source code repositories and source archive files from remote"
		echo "servers (outside of chainguard.dev)."
		echo
		echo "You will likely need several GB of free disk space in your current"
		echo "working directory [$(pwd)]:"
		df -h .
		echo
		echo "And this will consume a lot of network bandwith."
		echo "Your connection may be throttled by the remote servers."
		echo
		while true; do
			echo -n "Do you want to continue? [y/n]: "
			read -n1 answer
			case "$answer" in
				y|Y)
					echo
					break
				;;
				*)
					echo
					exit 1
				;;
			esac
		done
	fi
}

# Handle our target SBOM
handle_sbom() {
	local sbom="$1"
	local ref
	# Find all reference locators in the target SBOM
	for ref in $(get_refs "$sbom"); do
		# Handle each reference locator in the target SBOM
		handle_ref "$ref" "$sbom"
	done
}

# Find all reference locator URLs in a target SBOM
get_refs() {
	local sbom="$1"
	jq <"$sbom" -r '.packages[].externalRefs[].referenceLocator'
}

# Decode URLs
urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

# Handle reference locators
handle_ref() {
	local ref="$1"
	local sbom="$2"
	local url=$(urldecode "$ref")
	info "Found url [$url]"
	# Handle various strategies for fetching sources
	case "$url" in
		pkg:generic/*vcs_url=git+*)
			# Strip the leading data
			url=$(echo "$url" | sed -e "s/.*git+//")
			git_checkout "$url"
		;;
		pkg:generic/*download_url=*)
			# Strip the leading data
			url=$(echo "$url" | sed -e "s/^.*download_url=//")
			# Get the checksum
			local checksum_encoded=$(grep "$ref" "$sbom" | sed -e "s/.*checksum=//" -e "s/&.*$//")
			local checksum=$(urldecode "$checksum_encoded")
			local checksum_method=$(echo "$checksum" | sed -e "s/:.*$//")
			local checksum_hash=$(echo "$checksum" | sed -e "s/^.*://")
			local cmd="$checksum_method""sum"
			local target_filename="$WORK_DIR/artifacts/$(basename $url)"
			type "$cmd" 2>&1 >/dev/null || error "Please install [$cmd]"
			info "Checking for local archive [$url]"
			[ "$DRYRUN" = "1" ] && continue
			info "Examining checksum [$checksum_hash] on [$target_filename]..."
			if [ -f "$target_filename" ] && echo "$checksum_hash" | $cmd $target_filename 2>&1 >/dev/null; then
				info "Already have a clean download of [$url] at [$target_filename]"
			else
				# File is busted, or doesn't exist, so download a fresh one
				rm -rf "$target_filename"
				mkdir -p "$(dirname $target_filename)"
				info "Downloading archive [$url]"
				wget --continue -O "$target_filename" "$url"
				(echo "$checksum_hash" | $cmd $target_filename 2>&1 >/dev/null) || error "Checksum [$checksum_hash] does not match for file [$target_filename]"
			fi
			info "Extracting archive [$target_filename]"
			mkdir -p "$WORK_DIR/$ref"
			tar xf "$target_filename" -C "$WORK_DIR/$ref"
		;;
		pkg:github/*)
			# Strip the leading data
			url=$(echo "$url" | sed -e "s|^pkg:github|https://github.com|")
			git_checkout "$url"
		;;
		pkg:apk/wolfi*)
			if [ "$sbom" = "$WORK_DIR/$ref.sbom.spdx.json" ]; then
				# Recursive reference, so escape!
				return
			else
				# Get the apk, extract the SBOM, and then fetch sources in SBOM
				info "Fetching APK in order to extract SBOM [$ref]"
				package_to_sbom "$ref" "$WORK_DIR/$ref.sbom.spdx.json"
				info "Fetched SBOM [$sbom]"
				handle_sbom "$WORK_DIR/$ref.sbom.spdx.json"
			fi
		;;
		pkg:oci/image*)
			info "WARNING: OCI Image Download not yet handled; skipping [$url]"
		;;
		*)
			# Strip the leading data
			info "WARNING: Unhandled source download method; skipping [$url]"
		;;
	esac
}

git_checkout() {
	local url="$1"
	# Extract the repo name (before the commit hash)
	local repo=$(echo "$url" | sed -e "s/@.*$//")
	# Extract the commit hash
	local commit=$(echo "$url" | sed -e "s/^.*@//" -e "s/#.*$//")
	# Clone the whole repo (this can be a lot -- and you might get throttled)
	# Use the fully qualified encoded URL as the directory name
	# It's pretty darn long, but it should be guaranteed unique, and it's very informative...
	info "Cloning repo [$repo]"
	[ "$DRYRUN" = "1" ] && return
	# If we already have a clean git tree, then we can skip the clone (helps with re-runs)
	if git -C "$WORK_DIR/$ref" status >/dev/null 2>&1 ; then
		info "Already have a clean working repo [$repo] at [$WORK_DIR/$ref]"
	else
		# Directory is busted, or doesn't exist, so clone fresh from source
		info "Need a clean working repo at [$repo]"
		rm -rf "$WORK_DIR/$ref" && git clone "$repo" "$WORK_DIR/$ref"
	fi
	# Rewind back to the exact specified commit in the SBOM
	git -C "$WORK_DIR/$ref" checkout "$commit"
}

package_to_sbom() {
	local package="$1"
	local sbom="$2"
	local url= pkg_name= pkg_version= pkg_arch=
	case "$ARCH" in
		arm64) pkg_arch="aarch64" ;;
		*) pkg_arch="x86_64" ;;
	esac
	local f=$(basename "$sbom")
	case "$package" in
		$f)
			# Escape recursive package / source references
			info "Skipping recursive package-source self reference [$package]"
			return
		;;
		https://*.apk)
			# Fully formed URL, great!
			url="$package"
		;;
		pkg:apk/wolfi/*)
			# Looks like a purl, reformat to a usable URL
			pkg_name=$(echo "$package" | sed -e "s:^.*/::" -e "s:@.*$::")
			pkg_version=$(echo "$package" | sed -e "s:^.*@::" -e "s:?.*$::")
			pkg_arch=$(echo "$package" | sed -e "s:^.*=::")
			url="https://packages.wolfi.dev/os/$pkg_arch/$pkg_name-$pkg_version.apk"
		;;
		*)
			# Maybe just a common package name -- try to figure it out
			# Fetch an updated package index, if necessary
			info "Fetching package index"
			wget --continue -O "$WORK_DIR/artifacts/APKINDEX.tar.gz" "https://packages.wolfi.dev/os/$pkg_arch/APKINDEX.tar.gz"
			tar xf "$WORK_DIR/artifacts/APKINDEX.tar.gz" -C "$WORK_DIR/artifacts/" 2>/dev/null
			if grep -q -m1 "^P:$package$" "$WORK_DIR/artifacts/APKINDEX" 2>/dev/null; then
				# Found a precise match for our package name; great; version unspecified, so get the latest version
				pkg_name="$package"
				pkg_version=$(grep -A1 "^P:$pkg_name$" "$WORK_DIR/artifacts/APKINDEX" | grep "^V:" | sed -e "s/^V://" | sort -V | tail -n1)
				url="https://packages.wolfi.dev/os/$pkg_arch/$pkg_name-$pkg_version.apk"
			elif echo "$package" | grep -q "-r[0-9]+$"; then
				# Package name ends in an epoch, so let's assume this one includes a precise version
				url="https://packages.wolfi.dev/os/$pkg_arch/$package.apk"
			else
				error "Cannot determine URL for APK to extract SBOM"
			fi
		;;
	esac
	local apk_file="$WORK_DIR/artifacts/"$(basename "$url")
	info "Fetching [$url]"
	wget --continue -O "$apk_file" "$url"
	info "Extracting SBOM from [$apk_file] to [$sbom]"
	mkdir -p $(dirname "$sbom")
	tar zxOf "$apk_file" --wildcards "var/lib/db/sbom/*.spdx.json" 2>/dev/null > "$sbom"
}

# Check dependencies and set default values
checkdeps
DRYRUN=0
YES=0
ARCH="amd64"
SOURCES_DIR="$(pwd)/sources"
mkdir -p "$SOURCES_DIR"
WORK_DIR=

# Handle command line options
while [ ! -z "$1" ]; do
	case "$1" in
		-a|--arch)
			ARCH="$2"
			shift 2
		;;
		-d|--dry-run)
			DRYRUN=1
			shift
		;;
		-h|--help)
			YES=1
			usage
			exit 0
		;;
		-i|--image)
			IMAGE="$2"
			shift 2
		;;
		-p|--package)
			PACKAGE="$2"
			shift 2
		;;
		-s|--sbom)
			SBOM="$2"
			shift 2
		;;
		-y|--yes)
			YES=1
			shift
		;;
		*)
			usage
			exit 1
		;;
	esac
done

warn_about_resources

# Handle target sbom
if [ -f "$SBOM" ]; then
	# Target is a local file sbom
	# Make a directory to work in
	WORK_DIR="$SOURCES_DIR/$(basename $SBOM)"
	mkdir -p "$WORK_DIR"/sboms "$WORK_DIR"/artifacts
	sbom="$WORK_DIR/sboms/$(basename $SBOM)"
	cat "$SBOM" > "$sbom"
	info "Fetched sbom [$sbom]"
	handle_sbom "$sbom"
fi

# Handle target image
if [ ! -z "$IMAGE" ]; then
	# Try to determine and retrieve sbom over network
	# Make a directory to work in
	image="$IMAGE"
	WORK_DIR="$SOURCES_DIR/$image-$ARCH"
	mkdir -p "$WORK_DIR"/sboms "$WORK_DIR"/artifacts
	sbom="$WORK_DIR/sboms/$image-$ARCH.sbom.spdx.json"
	info "Fetching sbom [$ARCH/$image]"
	cosign download attestation \
	  --platform linux/$ARCH \
	  --predicate-type=https://spdx.dev/Document \
	  cgr.dev/chainguard/$image | \
	  jq '.payload | @base64d | fromjson | .predicate' > "$sbom"
	info "Fetched sbom [$sbom]"
	handle_sbom "$sbom"
fi

# Handle target package
if [ ! -z "$PACKAGE" ]; then
	# Fetch package, extract sbom
	package="$PACKAGE"
	WORK_DIR="$SOURCES_DIR/$(basename $package)"
	mkdir -p "$WORK_DIR"/sboms "$WORK_DIR"/artifacts
	sbom="$WORK_DIR/sboms/$package.sbom.spdx.json"
	info "Fetching sbom [$ARCH/$package]"
	package_to_sbom "$package" "$sbom"
	info "Fetched sbom [$sbom]"
	handle_sbom "$sbom"
fi
